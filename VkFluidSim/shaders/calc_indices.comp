// calc_indices.comp
#version 450

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// input sorted particle hashes
layout(std430, binding = 0) readonly buffer SortedKeys {
    uint sorted_keys[];
};
// output lookup table of start indices
layout(std430, binding = 1) writeonly buffer CellStartIndices {
    uint start_indices[];
};
// (only using particleCount here)
layout(push_constant) uniform PushConstants {
    uint particleCount;
    float deltaTime;
    float gravity;
    float smoothingRadius;
    float targetDensity;
    float pressureMultiplier;
    float collisionDamping;
    float mass;
    vec2 boxHalfSize;
    vec2 mousePos;
    vec4 color1;
    vec4 color2;
    vec4 color3;
    float maxSpeedForColor;
    float interactionStrength;
    float interactionRadius;
    uint mousePress;
} pc;

void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i >= pc.particleCount) return;

    uint key = sorted_keys[i];
    uint keyPrev = i == 0 ? 0xFFFFFFFF : sorted_keys[i - 1];
    if (key != keyPrev) {
        start_indices[key] = i;
    }
}

// void main() {
//     uint index = gl_GlobalInvocationID.x;
//     if (index >= pc.particleCount) return;

//     uint current_hash = sorted_hashes[index];

//     if (index == 0) {
//         start_indices[current_hash] = 0;
//         return;
//     }

//     uint prev_hash = sorted_hashes[index - 1];
//     if (current_hash != prev_hash) {
//         start_indices[current_hash] = index;
//     }
// }